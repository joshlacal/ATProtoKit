public indirect enum JSONValue: Codable, ATProtocolCodable, ATProtocolValue {
    case custom(any ATProtocolValue)
    case string(String)
    case number(Int)
    case bigNumber(String)
    case object([String: JSONValue])
    case array([JSONValue])
    case bool(Bool)
    case null
    case link(ATProtoLink)
    case bytes(Bytes)
    case unknownType(String, JSONValue)
    case decodeError(String)

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: DynamicCodingKeys.self)
        if let typeName = container.allKeys.first(where: { $0.stringValue == "$type" }),
           let typeValue = try? container.decode(String.self, forKey: typeName) {

        switch typeValue {
            {% for type_key, swift_type in type_cases %}
            case "{{ type_key }}":
                do {
                    let decodedObject = try {{ swift_type }}.init(from: decoder)
                    self = .custom(decodedObject)
                } catch {
                    print("Error decoding {{ swift_type }}: \(error)")
                    self = .decodeError("Error decoding {{ swift_type }}: \(error)")
                }
            {% endfor %}
                default:
                    do {
                        let unknownObject = try JSONValue.decodeAny(from: container)
                        self = .unknownType(typeValue, unknownObject)
                    } catch {
                        self = .decodeError("Decoding unknown type error: \(error)")
                    }

            }
        } else {
            do {
                let container = try decoder.singleValueContainer()

                if let stringValue = try? container.decode(String.self) {
                    self = .string(stringValue)
                } else if let intValue = try? container.decode(Int.self) {
                    self = .number(intValue)
                } else if let bigNumberString = try? container.decode(String.self) {
                    self = .bigNumber(bigNumberString)
                } else if let boolValue = try? container.decode(Bool.self) {
                    self = .bool(boolValue)
                } else if container.decodeNil() {
                    self = .null
                } else if var arrayContainer = try? decoder.unkeyedContainer() {
                    var array = [JSONValue]()
                    while !arrayContainer.isAtEnd {
                        let value = try arrayContainer.decode(JSONValue.self)
                        array.append(value)
                    }
                    self = .array(array)
                } else if let object = try? container.decode([String: JSONValue].self) {
                    self = .object(object)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "JSONValue cannot be decoded")
                }
            } catch {
                self = .decodeError("Decoding error: \\(error)")
            }
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()

        switch self {
            case .string(let stringValue):
                try container.encode(stringValue)
            case .number(let intValue):
                try container.encode(intValue)
            case .bigNumber(let bigNumberString):
                try container.encode(bigNumberString)
            case .bool(let boolValue):
                try container.encode(boolValue)
            case .null:
                try container.encodeNil()
            case .link(let linkValue):
                try container.encode(linkValue)
            case .bytes(let bytesValue):
                try container.encode(bytesValue)
            case .array(let arrayValue):
                var arrayContainer = encoder.unkeyedContainer()
                for value in arrayValue {
                    try arrayContainer.encode(value)
                }
            case .object(let objectValue):
                var objectContainer = encoder.container(keyedBy: DynamicCodingKeys.self)
                for (key, value) in objectValue {
                    let key = DynamicCodingKeys(stringValue: key)!
                    try objectContainer.encode(value, forKey: key)
                }
            case .custom(let customValue):
                try customValue.encode(to: encoder)
            case .unknownType(_, let unknownValue):
                try unknownValue.encode(to: encoder)
            case .decodeError(let errorMessage):
                throw EncodingError.invalidValue(errorMessage, EncodingError.Context(codingPath: encoder.codingPath, debugDescription: "Cannot encode a decoding error."))
        }
    }

    struct DynamicCodingKeys: CodingKey {
        var stringValue: String
        var intValue: Int?

        init?(stringValue: String) {
            self.stringValue = stringValue
        }

        init?(intValue: Int) {
            self.intValue = intValue
            self.stringValue = String(intValue)
        }
    }

        private static func decodeAny(from container: KeyedDecodingContainer<DynamicCodingKeys>) throws -> JSONValue {
        var dictionary = [String: JSONValue]()
        for key in container.allKeys {
            if let boolValue = try? container.decode(Bool.self, forKey: key) {
                dictionary[key.stringValue] = .bool(boolValue)
            } else if let intValue = try? container.decode(Int.self, forKey: key) {
                dictionary[key.stringValue] = .number(intValue)
            } else if let doubleValue = try? container.decode(Double.self, forKey: key) {
                dictionary[key.stringValue] = .bigNumber(String(doubleValue))
            } else if let stringValue = try? container.decode(String.self, forKey: key) {
                dictionary[key.stringValue] = .string(stringValue)
            } else if let nestedContainer = try? container.nestedContainer(keyedBy: DynamicCodingKeys.self, forKey: key) {
                dictionary[key.stringValue] = try decodeAny(from: nestedContainer)
            } else if var arrayContainer = try? container.nestedUnkeyedContainer(forKey: key) {
                var array = [JSONValue]()
                while !arrayContainer.isAtEnd {
                    let value = try arrayContainer.decode(JSONValue.self)
                    array.append(value)
                }
                dictionary[key.stringValue] = .array(array)
            } else {
                throw DecodingError.dataCorruptedError(forKey: key, in: container, debugDescription: "Cannot decode value")
            }
        }
        return .object(dictionary)
    }

    private static func decodeAny(from unkeyedContainer: inout UnkeyedDecodingContainer) throws -> [Any] {
        // For decoding arrays
        var array = [Any]()
        while !unkeyedContainer.isAtEnd {
            if let value = try? unkeyedContainer.decode(Bool.self) {
                array.append(value)
            } else if let value = try? unkeyedContainer.decode(Int.self) {
                array.append(value)
            } else if let value = try? unkeyedContainer.decode(Double.self) {
                array.append(value)
            } else if let value = try? unkeyedContainer.decode(String.self) {
                array.append(value)
            } else if let nestedContainer = try? unkeyedContainer.nestedContainer(keyedBy: DynamicCodingKeys.self) {
                array.append(try decodeAny(from: nestedContainer))
            } else if var nestedArrayContainer = try? unkeyedContainer.nestedUnkeyedContainer() {
                array.append(try decodeAny(from: &nestedArrayContainer))
            } else {
                throw DecodingError.dataCorruptedError(in: unkeyedContainer, debugDescription: "Cannot decode array element")
            }
        }
        return array
    }


}
